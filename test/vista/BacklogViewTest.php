<?php

namespace miScrum\vista;

require '../vendor/autoload.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-04 at 10:46:54.
 */

use miScrum\vista\BacklogView;

class BacklogViewTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var BacklogView
     */
    protected $backlogView;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers miScrum\vista\BacklogView::mostrar
     * @todo   Implement testMostrar().
     */
    /*public function testMostrar() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }*/

    /**
     * @covers miScrum\vista\BacklogView::prepararDatos
     * @todo   Implement testPrepararDatos().
     * @dataProvider datosCRUD
     */
    public function testPrepararCRUD($operacion,$datos) {
        $this->backlogView = new BacklogView("POST",$operacion,$datos);
        $datosPreparados = $this->backlogView->prepararDatos();
        echo "[testPrepararCRUD:".$operacion."]\n";
        print_r($datos);
        echo " ---- \n";
        print_r($datosPreparados);
        echo "-------------------------------------|n";
        /*$this->assertEquals($datosPreparados["id"],$datos["id"],"El id no se ha preparado correctamente");
        $this->assertEquals($datosPreparados["nombre"],$datos["nombre"],"El nombre no se ha preparado correctamente");
        $this->assertEquals($datosPreparados["descripcion"],$datos["descripcion"],"La descripcion no se ha preparado correctamente");
        $this->assertEquals($datosPreparados["valor"],$datos["valor"],"El valor no se ha preparado correctamente");*/
        $this->assertTrue($this->compararArrays($datosPreparados,$datos),"Los datos no son correctos");
    }
    
    public function testPrepararVariasHistorias(){
        $datos = $this->datosVariasHistorias();
        $this->backlogView = new BacklogView("POST","seleccionarTodo",$datos);
        $datosPreparados = $this->backlogView->prepararDatos();
        $this->assertTrue(count($datosPreparados)==3,"El número de elementos ha cambiado.");
        echo "[testPreararVariasHistorias]";
        print_r($datosPreparados);
        echo "---------------------------\n";
        for ($i=0;$i<count($datos);$i++){
            $id = $datos[$i]["id"];
            $this->assertTrue($this->compararArrays($datos[$i],$datosPreparados[$id]),"Los elementos no son iguales");
        }
    }
    
    public function datosCRUD(){
        return array(
            "insertar" => ["insertar",["id"=>"HTest","nombre"=>"Nombre de la historia","descripcion"=>"Descripción de la historia","valor"=>100]],
            "leer" => ["leer",["id"=>"HTest","nombre"=>"Nombre de la historia","descripcion"=>"Descripción de la historia","valor"=>100]],
            "actualizar" => ["actualizar",["id"=>"HTest","nombre"=>"Nombre de la historia","descripcion"=>"Descripción de la historia","valor"=>100]],
            "borrar" => ["borrar",["id"=>"HTest","nombre"=>"Nombre de la historia","descripcion"=>"Descripción de la historia","valor"=>100]]
        );        
    }
    
    public function datosVariasHistorias(){
        return [
          0 => ["id"=>"HTest1","nombre"=>"Nombre de la historia 1","descripcion"=>"Descripción de la historia 1","valor"=>100],  
          1 => ["id"=>"HTest2","nombre"=>"Nombre de la historia 2","descripcion"=>"Descripción de la historia 2","valor"=>100],
          2 => ["id"=>"HTest3","nombre"=>"Nombre de la historia 3","descripcion"=>"Descripción de la historia 3","valor"=>100]
        ];
    }
    
    public function compararArrays($array1,$array2){
        return array_diff($array1, $array2) == array_diff($array2,$array1);
    }
}
