<?php


namespace miScrum\modelo;

require '../vendor/autoload.php';
use miScrum\modelo\MySQLConector;
use miScrum\config\BDConfig;
use miScrum\modelo\Historia;
use miScrum\modelo\HistoriaMySQL;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-03 at 18:10:31.
 */
class HistoriaMySQLTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var HistoriaMySQL
     */
    protected $historiaMySQL;
    protected $mySQLCon;
    protected $resultadoInsertar;

    private function consultarBD($sqlTest){
        $bdConfig = new BDConfig();
        $this->mySQLCon = new MySQLConector($bdConfig);
        $this->mySQLCon->conectar();
        return $this->mySQLCon->sql($sqlTest);    
    }
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->historiaMySQL = new HistoriaMySQL("Htest!_$",
                                                "Historia de prueba",
                                                "Descripción de la historia de prueba",
                                                100);
        $this->resultadoInsertar = $this->historiaMySQL->insertar();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->historiaMySQL->borrar();
    }

   
    public function testInsertar() {
        
        // comprobaciones
        //$resultado = $this->consultarBD("SELECT * FROM Backlog WHERE id='".$this->historiaMySQL->getId()."';");
        echo "[testInsertar] >>";
        print_r($this->resultadoInsertar);
        echo "--------------------\n";
        $this->assertEquals($this->resultadoInsertar["id"],"Htest!_$","La historia no se ha insertado");
        $this->assertEquals($this->resultadoInsertar["nombre"],"Historia de prueba","La inserción no devuelve el nombre");
        $this->assertEquals($this->resultadoInsertar["descripcion"],"Descripción de la historia de prueba","La inserción no devuelve la descripción");
        $this->assertEquals($this->resultadoInsertar["valor"],100,"La inserción no devuelve el valor");
        //$this->mySQLCon->cerrar();
    }

    public function testLeer(){
        $resultado = $this->historiaMySQL->leer();
        echo "[testLeer]";
        print_r($resultado);
        echo "--------------------\n";
        $this->assertEquals($resultado["id"],"Htest!_$","La lectura no devuelve el id");
        $this->assertEquals($resultado["nombre"],"Historia de prueba","La lectura no devuelve el nombre");
        $this->assertEquals($resultado["descripcion"],"Descripción de la historia de prueba","La lectura no devuelve la descripción");
        $this->assertEquals($resultado["valor"],100,"La lectura no devuelve el valor");
    }

    public function testActualizar() {
        $this->historiaMySQL->setNombre("Nombre modificado");
        $resultado = $this->historiaMySQL->actualizar();
        echo "[testActualizar]";
        print_r($resultado);
        echo "--------------------\n";
        $this->assertEquals($resultado["id"],"Htest!_$","La actualización no devuelve el id");
        $this->assertEquals($resultado["nombre"],"Nombre modificado","El nombre actualizado no es correcto");
        $this->assertEquals($resultado["descripcion"],"Descripción de la historia de prueba","La actualización no devuelve la descripción");
        $this->assertEquals($resultado["valor"],100,"La actualización no devuelve el valor");
        
        //$this->mySQLCon->cerrar();
    }
    
    public function testBorrar() {
        $resultado = $this->historiaMySQL->borrar();
        echo "[testBorrar]";
        print_r($resultado);
        echo "--------------------\n";
        // comprobaciones
        //$resultado = $this->consultarBD("SELECT * FROM Backlog WHERE id='".$this->historiaMySQL->getId()."';");
        $this->assertEquals($resultado["id"],"Htest!_$","El resultado no incluye el ID");
        $this->assertArrayNotHasKey("error",$resultado,"Se ha generado un error durante el borrado");
        //$this->mySQLCon->cerrar();
    } 

}
