<?php

namespace miScrum\modelo;

require '../vendor/autoload.php';
use miScrum\config\BDConfig;
use miScrum\modelo\MySQLConector;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-02 at 20:27:40.
 * 
 * ADVERTENCIA:
 * Para que este test sea exitoso es preciso que exista una BBDD MySQL
 * en la máquina local, con una base de datos acorde con la configuración
 * utilizada.
 * 
 */
class MySQLConectorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MySQLConector
     */
    protected $config;
    protected $mysqlConector;
    protected $idHistoriaEjemplo;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->config = new BDConfig();
        $this->mysqlConector = new MySQLConector($this->config);
        $this->idHistoriaEjemplo = "ID_9x!_";
     }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function test_conectar(){
        $this->mysqlConector->conectar();
        $this->assertTrue($this->mysqlConector->getEstadoConectado() , "El conectar no está en estado conectado");
    }
    
    /**
     * @covers miScrum\modelo\MySQLConector::sql
     * @todo   Implement testSql().
     */
    public function testSql1() {
        $this->mysqlConector->conectar();
        $resultado = $this->mysqlConector->sql("INSERT INTO Backlog VALUES ('".$this->idHistoriaEjemplo."','Nombre historia 1','Descripcion historia 1',100);");
        $this->assertEquals($resultado,true,"No se ha insertado nada en la base de datos");
    }
    
/**
     * @covers miScrum\modelo\MySQLConector::sql
     * @todo   Implement testSql().
     */
   public function testSql2() {
        $this->mysqlConector->conectar();
        $sql = "SELECT * FROM Backlog WHERE id = '".$this->idHistoriaEjemplo."'";
        $this->mysqlConector->sql($sql);
        $this->assertTrue($this->mysqlConector->hasNext(),"Debería haber un resultado");
        $fila = $this->mysqlConector->next();
        $this->assertFalse($this->mysqlConector->hasNext(),"No debería haber ninguna fila");
        $this->assertEquals($fila["id"],$this->idHistoriaEjemplo,"La historia no se ha obtenido.");
    }    

    public function testSql3() {
        $this->mysqlConector->conectar();
        $resultado = $this->mysqlConector->sql("DELETE FROM Backlog WHERE id = '".$this->idHistoriaEjemplo."';");
        $this->assertEquals($resultado,1,"La historia no se ha borrado.");
    }        
    
    public function testConfiguracionErronea(){
        $configError = new BDConfig();
        $configError->setPassword("....");
        $mysqlConError = new MySQLConector($configError);
        try{
            $mysqlConError->conectar();
        } catch (\Exception $ex) {
            $this->assertTrue(true,"La conexión con conguración errónea debe generar una excepción");
            return;
        }
        $this->fail("No se ha producido una excecpción");
    }
    
    public function testCerrar() {
        $this->mysqlConector->cerrar();
        $this->assertFalse($this->mysqlConector->getEstadoConectado(), "La sesión no se ha desconectado");
    }

}
